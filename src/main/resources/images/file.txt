DROP SCHEMA public CASCADE;
CREATE SCHEMA public;

CREATE TABLE Genero (
  Codigo SERIAL,
  Nome VARCHAR(50) NOT NULL UNIQUE,
  Descricao TEXT NOT NULL,
  PRIMARY KEY (Codigo)
);

CREATE TABLE Subgenero (
  CodGenero INT,
  CodSubgenero INT,
  PRIMARY KEY (CodGenero, CodSubgenero),
  FOREIGN KEY (CodGenero) REFERENCES Genero(Codigo)
    ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (CodSubgenero) REFERENCES Genero(Codigo)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CHECK (CodGenero <> CodSubgenero)
);

-- Sequencia para Codigos Ãºnicos entre usuarios, podcasters e artistas;
CREATE SEQUENCE codigo_seq;

CREATE TABLE Usuario (
    Codigo INT DEFAULT nextval('codigo_seq'),
    Nome VARCHAR(100) NOT NULL,
    Username VARCHAR(50) NOT NULL UNIQUE,
    Nacionalidade VARCHAR(50),
    PaisAtual VARCHAR(50),
    NumSeguindo INT NOT NULL DEFAULT 0,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Senha VARCHAR(50) NOT NULL,
    NumTelefone VARCHAR(20),
    PRIMARY KEY (Codigo)
);

CREATE TABLE Podcaster (
    Codigo INT NOT NULL DEFAULT nextval('codigo_seq'),
    Nome VARCHAR(100) NOT NULL UNIQUE,
    Nacionalidade VARCHAR(50) NOT NULL,
    AreaInfluencia VARCHAR(50) NOT NULL,
    NumeroSeguidores INT NOT NULL DEFAULT 0,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Senha VARCHAR(50) NOT NULL,
    NumTelefone VARCHAR(20),
    PRIMARY KEY (Codigo)
);

CREATE TABLE Artista (
    Codigo INT NOT NULL DEFAULT nextval('codigo_seq'),
    Nome VARCHAR(100) NOT NULL UNIQUE,
    Nacionalidade VARCHAR(50) NOT NULL,
    Biografia VARCHAR(500),
    NumeroSeguidores INT NOT NULL DEFAULT 0,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Senha VARCHAR(50) NOT NULL,
    NumTelefone VARCHAR(20),
    PRIMARY KEY (Codigo)
);

CREATE TABLE GeneroArtista (
    CodGenero INT,
    CodArtista INT,
    PRIMARY KEY (CodGenero, CodArtista),
    FOREIGN KEY (CodGenero) REFERENCES Genero(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (CodArtista) REFERENCES Artista(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE
);

-- CodSeguido vai ser gerenciado por um trigger
CREATE TABLE UsuarioSegue ( 
    CodSeguidor INT, 
    CodSeguido INT, 
    PRIMARY KEY (CodSeguidor, CodSeguido), 
    FOREIGN KEY (CodSeguidor) REFERENCES Usuario(Codigo)
);

CREATE TABLE Item ( 
    Codigo SERIAL,
    NumeroAvaliacoes INT NOT NULL DEFAULT 0, 
    AvaliacaoMedia NUMERIC(3,2) DEFAULT NULL, 
    DataCriacao DATE NOT NULL DEFAULT CURRENT_DATE,
    Tipo VARCHAR(10) NOT NULL,
    PRIMARY KEY (Codigo),
    CHECK (tipo IN ('musica', 'episodio', 'colecao', 'podcast'))
);

CREATE TABLE AvaliaItem ( 
    CodItem INT, 
    CodUsuario INT, 
    Nota INT NOT NULL, 
    Comentario TEXT, 
    PRIMARY KEY (CodItem, CodUsuario), 
    FOREIGN KEY (CodItem) REFERENCES Item (Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE, 
    FOREIGN KEY (CodUsuario) REFERENCES Usuario(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE,
    CHECK (Nota >= 1 AND Nota <=5)
);

CREATE TABLE Podcast ( 
    CodItem INT,
    Titulo VARCHAR(100) NOT NULL,
    Apresentador VARCHAR(50) NOT NULL, 
    Idiomaprincipal VARCHAR(50) NOT NULL, 
    NumEpisodios INT NOT NULL DEFAULT 0,
    Tema1 VARCHAR(30) NOT NULL,
    Tema2 VARCHAR(30),
    CodPodcaster INT NOT NULL,
    PRIMARY KEY (CodItem),
    FOREIGN KEY (CodPodcaster) REFERENCES Podcaster(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (CodItem) REFERENCES Item(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Episodio ( 
    CodItem INT, 
    CodPodcast INT, 
    Titulo VARCHAR(100) NOT NULL, 
    Numero INT NOT NULL, 
    Transcricao TEXT, 
    Assunto VARCHAR(30) NOT NULL,  
    Duracao INTERVAL NOT NULL DEFAULT '00:00:00',
    PRIMARY KEY (CodItem), 
    FOREIGN KEY (CodItem) REFERENCES Item(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE, 
    FOREIGN KEY (CodPodcast) REFERENCES Podcast (CodItem)
      ON DELETE CASCADE ON UPDATE CASCADE,
    CHECK (Numero > 0)
);

CREATE TABLE ConvidadoEpisodio ( 
    CodEpisodio INT, 
    Convidado VARCHAR(50), 
    PRIMARY KEY (CodEpisodio, Convidado), 
    FOREIGN KEY (CodEpisodio) REFERENCES Episodio (CodItem)
      ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Musica ( 
    CodItem INT, 
    CodArtista INT, 
    Titulo VARCHAR(100) NOT NULL, 
    Duracao INTERVAL NOT NULL DEFAULT '00:00:00',
    DataPublicacao DATE NOT NULL, 
    CodGenero INT,
    Letra TEXT, 
    PRIMARY KEY (CodItem), 
    FOREIGN KEY (CodItem) REFERENCES Item(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE, 
    FOREIGN KEY (CodArtista) REFERENCES Artista(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (CodGenero) REFERENCES Genero(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CompositorMusica ( 
    CodMusica INT, 
    Compositor VARCHAR(50), 
    PRIMARY KEY (CodMusica, Compositor), 
    FOREIGN KEY (CodMusica) REFERENCES Musica(CodItem)
      ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Colecao (
    CodItem INT,
    Titulo VARCHAR(100) NOT NULL,
    Descricao VARCHAR(200),
    Visibilidade BOOLEAN, 
    DataLancamento DATE,
    Gravadora VARCHAR(50),
    CodUsuario INT,
    CodArtista INT,
    Duracao INTERVAL NOT NULL DEFAULT '00:00:00',
    QuantidadeMusicas INT NOT NULL DEFAULT 0,
    Tipo VARCHAR(10) NOT NULL,
    PRIMARY KEY (CodItem),
    FOREIGN KEY (CodItem) REFERENCES Item(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (CodUsuario) REFERENCES Usuario(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (CodArtista) REFERENCES Artista(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE,
    CHECK (Tipo IN ('playlist', 'album')), 
    CHECK (QuantidadeMusicas >= 0),
    CHECK (Duracao >= '00:00:00')
);

CREATE TABLE GeneroColecao (
    CodGenero INT,
    CodColecao INT,
    PRIMARY KEY (CodGenero, CodColecao),
    FOREIGN KEY (CodGenero) REFERENCES Genero(Codigo)
      ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (CodColecao) REFERENCES Colecao(CodItem)
      ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE MusicaColecao ( 
    CodColecao INT,
    CodMusica INT,
    NumFaixa INT NOT NULL,
    PRIMARY KEY (CodColecao, CodMusica),
    FOREIGN KEY (CodColecao) REFERENCES Colecao(CodItem)
      ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (CodMusica) REFERENCES Musica(CodItem)
      ON DELETE CASCADE ON UPDATE CASCADE,
    CHECK (NumFaixa > 0)
);

-- VISOES

CREATE VIEW MusicaInfo AS
SELECT 
    M.Titulo AS TituloMusica,
    A.Nome AS Artista,
    G.Nome AS Genero,
    M.Duracao AS Duracao,
    M.Letra AS Letra,
    I.NumeroAvaliacoes AS NumeroAvaliacoes,
    I.AvaliacaoMedia AS AvaliacaoMedia,
    M.DataPublicacao AS DataPublicacao
FROM 
    Musica M
JOIN 
    Item I ON M.CodItem = I.Codigo
JOIN 
    Artista A ON M.CodArtista = A.Codigo
LEFT JOIN 
    Genero G ON M.CodGenero = G.Codigo;

CREATE VIEW AlbumInfo AS
SELECT 
    C.Titulo AS TituloAlbum,
    A.Nome AS Artista,
    C.Gravadora AS Gravadora,
    C.DataLancamento AS DataLancamento,
    C.Duracao AS Duracao,
    C.QuantidadeMusicas AS QuantidadeMusicas,
    I.DataCriacao AS DataCriacao,
    I.NumeroAvaliacoes AS NumeroAvaliacoes,
    I.AvaliacaoMedia AS AvaliacaoMedia
FROM
    Colecao C
JOIN
    Item I ON C.CodItem = I.Codigo
JOIN
    Artista A ON C.CodArtista = A.Codigo
WHERE
    C.Tipo = 'album';

CREATE VIEW PlaylistInfo AS
SELECT 
    C.Titulo AS TituloAlbum,
    U.Nome AS Criador,
    C.Descricao AS Descricao,
    C.Visibilidade AS Visibilidade,
    C.QuantidadeMusicas AS QuantidadeMusicas,
    C.Duracao AS Duracao,
    I.DataCriacao AS DataCriacao,
    I.NumeroAvaliacoes AS NumeroAvaliacoes,
    I.AvaliacaoMedia AS AvaliacaoMedia
FROM
    Colecao C
JOIN
    Item I ON C.CodItem = I.Codigo
JOIN
    Usuario U ON C.CodUsuario = U.Codigo
WHERE
    C.Tipo = 'playlist';

CREATE VIEW PodcastInfo AS
SELECT 
    P.Titulo AS TituloPodcast,
    P.Apresentador AS Apresentador,
    P.IdiomaPrincipal AS IdiomaPrincipal,
    P.Tema1 AS Tema1,
    P.Tema2 AS Tema2,
    Pd.Nome AS NomePodcaster,
    P.NumEpisodios AS NumEpisodios,
    I.DataCriacao AS DataCriacao,
    I.NumeroAvaliacoes AS NumeroAvaliacoes,
    I.AvaliacaoMedia AS AvaliacaoMedia
FROM
  Podcast P
JOIN 
  Item I ON P.CodItem = I.Codigo
JOIN 
  Podcaster Pd ON P.CodPodcaster = Pd.Codigo;

CREATE VIEW EpisodioInfo AS
SELECT 
    E.Titulo AS TituloEpisodio,
    E.Assunto AS Assunto,
    E.Numero AS Numero,
    E.Duracao AS Duracao,
    P.Titulo AS NomePodcast,
    I.DataCriacao AS DataCriacao,
    I.NumeroAvaliacoes AS NumeroAvaliacoes,
    I.AvaliacaoMedia AS AvaliacaoMedia,
    E.Transcricao AS Transcricao
FROM
    Episodio E
JOIN
    Item I ON E.CodItem = I.Codigo
JOIN
    Podcast P ON E.CodPodcast = P.CodItem;

CREATE VIEW UsuarioInfo AS
SELECT Codigo, Nome, Username, Nacionalidade, PaisAtual, NumSeguindo
FROM Usuario;

CREATE VIEW ArtistaInfo AS
SELECT Codigo, Nome, Nacionalidade, Biografia, NumeroSeguidores
FROM Artista;

CREATE VIEW PodcasterInfo AS
SELECT Codigo, Nome, Nacionalidade, AreaInfluencia, NumeroSeguidores
FROM Podcaster;

CREATE VIEW MusicaColecaoInfo AS
SELECT 
    C.Titulo AS TituloColecao,
    M.Titulo AS TituloMusica,
    MC.NumFaixa AS NumeroFaixa
FROM 
    MusicaColecao MC
JOIN 
    Colecao C ON MC.CodColecao = C.CodItem
JOIN 
    Musica M ON MC.CodMusica = M.CodItem
ORDER BY 
    C.Titulo, MC.NumFaixa;

CREATE VIEW PodcastEpisodioInfo AS
SELECT 
    P.Titulo AS Podcast,
    E.Titulo AS Episodio,
    E.Numero AS NumeroEpisodio,
    E.Duracao AS Duracao
FROM 
    Episodio E
JOIN 
    Podcast P ON E.CodPodcast = P.CodItem;

-- INDICES
CREATE INDEX idx_usuario_username ON Usuario (Username);
CREATE INDEX idx_artista_nome ON Artista (Nome);
CREATE INDEX idx_podcaster_nome ON Podcaster (Nome);
CREATE INDEX idx_musica_codartista ON Musica (CodArtista);
CREATE INDEX idx_podcast_codpodcaster ON Podcast (CodPodcaster);
CREATE INDEX idx_episodio_codpodcast ON Episodio (CodPodcast);
CREATE INDEX idx_colecao_codusuario ON Colecao (CodUsuario);
CREATE INDEX idx_usuariosegue_codseguidor ON UsuarioSegue (CodSeguidor);
CREATE INDEX idx_avaliaitem_coditem ON AvaliaItem (CodItem);
CREATE INDEX idx_convidadoepisodio_codepisodio ON ConvidadoEpisodio (CodEpisodio);

-- PROCEDIMENTOS ARMAZENADOS

-- Procedimento que cria um Item e associa seu codigo a um Podcast, facilitando o processo de criacao
CREATE OR REPLACE FUNCTION novo_podcast(
    codPodcaster INT, 
    titulo VARCHAR, 
    apresentador VARCHAR, 
    idiomaprincipal VARCHAR, 
    tema1 VARCHAR, 
    tema2 VARCHAR DEFAULT NULL
) RETURNS INT AS $$
DECLARE
    codPodcast INT;
BEGIN
    INSERT INTO Item (tipo) VALUES ('podcast') RETURNING Codigo INTO codPodcast;
    INSERT INTO Podcast (CodItem, CodPodcaster, Titulo, Apresentador, Idiomaprincipal, Tema1, Tema2) 
    VALUES (codPodcast, codPodcaster, titulo, apresentador, idiomaprincipal, tema1, tema2);
    RETURN codPodcast;
END; $$ LANGUAGE plpgsql;

-- Procedimento que cria um Item e associa seu codigo a uma Musica, alem de possivelmente associar essa 
-- musica a uma Colecao e definir seus compositores
CREATE OR REPLACE FUNCTION nova_musica(
  codArtista INT, 
  titulo VARCHAR, 
  datalancamento DATE, 
  duracao INTERVAL, 
  codGenero INT, 
  letra VARCHAR, 
  codColecaoVar INT DEFAULT NULL,
  compositores VARCHAR[] DEFAULT NULL
) RETURNS INT AS $$
DECLARE
    codMusica INT;
    posMusica INT;
    compositor VARCHAR;
BEGIN
    INSERT INTO Item (tipo) VALUES ('musica') RETURNING codigo INTO codMusica;
    INSERT INTO Musica (CodItem, CodArtista, Titulo, DataPublicacao, Duracao, CodGenero, Letra) VALUES (codMusica, codArtista, titulo, datalancamento, duracao, codGenero, letra);
    
    IF codColecaoVar IS NOT NULL THEN
        posMusica := (SELECT COUNT(*) FROM MusicaColecao WHERE CodColecao = codColecaoVar) + 1;
        INSERT INTO MusicaColecao (CodColecao, CodMusica, NumFaixa) VALUES (codColecaoVar, codMusica, posMusica);
    END IF;

    IF compositores IS NOT NULL THEN
        FOREACH compositor IN ARRAY compositores
        LOOP
            INSERT INTO CompositorMusica (CodMusica, Compositor) 
            VALUES (codMusica, compositor);
        END LOOP;
    END IF;

    RETURN codMusica;
END;
$$ LANGUAGE plpgsql;

-- Procedimento que cria um Item e associa seu codigo a um Episodio, facilitando o processo de criacao
CREATE OR REPLACE FUNCTION novo_episodio(codPodcast INT, titulo VARCHAR, duracao INTERVAL, numero INT, assunto VARCHAR, transcricao TEXT) RETURNS INT AS $$
DECLARE
    codEpisodio INT;
BEGIN
    INSERT INTO Item (tipo) VALUES ('episodio') RETURNING Codigo INTO codEpisodio;
    INSERT INTO Episodio (CodItem, CodPodcast, Titulo, Duracao, Numero, Assunto, Transcricao) VALUES (codEpisodio, codPodcast, titulo, duracao, numero, assunto, transcricao);
    RETURN codEpisodio;
END; $$ LANGUAGE plpgsql;

-- Procedimento que cria um Item e associa seu codigo a uma Colecao do tipo Album
CREATE OR REPLACE FUNCTION nova_colecao_album(codArtista INT, titulo VARCHAR, datalancamento DATE, gravadora VARCHAR) returns INT as $$
DECLARE
    codColecao INT;
BEGIN
    INSERT INTO Item (tipo) VALUES ('colecao') RETURNING Codigo INTO codColecao;
    INSERT INTO Colecao (CodItem, Titulo, DataLancamento, Gravadora, CodArtista, Tipo) VALUES (codColecao, titulo, datalancamento, gravadora, codArtista, 'album');
    RETURN codColecao;
END; $$ language plpgsql;

-- Procedimento que cria um Item e associa seu codigo a uma Colecao do tipo Playlist
CREATE OR REPLACE FUNCTION nova_colecao_playlist(codUsuario INT, titulo VARCHAR, visibilidade BOOLEAN, descricao VARCHAR) returns INT as $$
DECLARE
    codColecao INT;
BEGIN
    INSERT INTO Item (tipo) VALUES ('colecao') RETURNING Codigo INTO codColecao;
    INSERT INTO Colecao (CodItem, Titulo, Descricao, Visibilidade, CodUsuario, Tipo) VALUES (codColecao, titulo, descricao, visibilidade, codUsuario, 'playlist');
    RETURN codColecao;
END; $$ language plpgsql;

-- TRIGGERS

-- trigger que controla a sequencia de codigos unicos entre usuarios, podcasters e artistas
CREATE OR REPLACE FUNCTION control_seq() RETURNS trigger AS $$
declare
  val INT:= (SELECT nextval('codigo_seq'));
BEGIN
  IF NEW.codigo = val then
    return new;
  ELSEIF NEW.codigo <> val - 1 THEN
    PERFORM setval('codigo_seq', GREATEST(val - 1, 1));
    RAISE EXCEPTION 'NÃ£o foi possivel setar o campo codigo, use apenas o valor default';
  ELSE
    PERFORM setval('codigo_seq', val - 1);
    RETURN NEW;
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER control_seq_usuariotg
BEFORE INSERT ON Usuario
FOR EACH ROW 
EXECUTE PROCEDURE control_seq();

CREATE TRIGGER control_seq_podcasterotg
BEFORE INSERT ON Podcaster
FOR EACH ROW 
EXECUTE PROCEDURE control_seq();

CREATE TRIGGER control_seq_artistatg
BEFORE INSERT ON Artista
FOR EACH ROW 
EXECUTE PROCEDURE control_seq();

-- trigger que impede que o campo Codigo seja alterado para qualquer valor diferente do original
CREATE OR REPLACE FUNCTION prevent_codigo_change() RETURNS TRIGGER AS $$
BEGIN
  IF NEW.Codigo != OLD.Codigo THEN
    RAISE EXCEPTION 'AtualizaÃ§Ã£o do campo Codigo nÃ£o permitida';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER usuario_codigotg
BEFORE UPDATE OF Codigo ON Usuario
FOR EACH ROW EXECUTE FUNCTION prevent_codigo_change();

CREATE TRIGGER podcaster_codigotg
BEFORE UPDATE OF Codigo ON Podcaster
FOR EACH ROW EXECUTE FUNCTION prevent_codigo_change();

CREATE TRIGGER artista_codigotg
BEFORE UPDATE OF Codigo ON Artista
FOR EACH ROW EXECUTE FUNCTION prevent_codigo_change();

-- trigger que verifica se o codigo do seguido existe em Artista ou Podcaster
-- fazendo o papel de uma constraint de chave estrangeira
CREATE OR REPLACE FUNCTION check_codseguido()
RETURNS TRIGGER AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM Artista 
        WHERE Codigo = NEW.CodSeguido
        UNION ALL
        SELECT 1 
        FROM Podcaster 
        WHERE Codigo = NEW.CodSeguido
    ) THEN 
        RAISE EXCEPTION 'CodSeguido does not exist in either Artista or Podcaster table';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_codseguidotg
BEFORE INSERT OR UPDATE ON UsuarioSegue
FOR EACH ROW 
EXECUTE PROCEDURE check_codseguido();

-- trigger que automatiza a atualizaÃ§Ã£o dos campos NumeroAvaliacoes e AvaliacaoMedia da tabela Item
CREATE OR REPLACE FUNCTION atualizar_avaliacao() 
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        UPDATE Item
        SET AvaliacaoMedia = (COALESCE(avaliacaomedia, 0) * NumeroAvaliacoes + NEW.Nota) / (COALESCE(numeroavaliacoes, 0) + 1),
            NumeroAvaliacoes = COALESCE(NumeroAvaliacoes + 1, 1)
        WHERE Codigo = NEW.CodItem;
    ELSIF (TG_OP = 'UPDATE') THEN
        UPDATE Item
        SET AvaliacaoMedia = (AvaliacaoMedia * NumeroAvaliacoes - OLD.Nota + NEW.Nota) / NumeroAvaliacoes
        WHERE Codigo = NEW.CodItem;
    ELSIF (TG_OP = 'DELETE') THEN
        UPDATE Item
        SET AvaliacaoMedia = CASE WHEN NumeroAvaliacoes = 1 THEN NULL ELSE (AvaliacaoMedia * NumeroAvaliacoes - OLD.Nota) / (NumeroAvaliacoes - 1) END,
            NumeroAvaliacoes = NumeroAvaliacoes - 1
        WHERE Codigo = OLD.CodItem;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER atualizar_avaliacao_trigger
AFTER INSERT OR DELETE OR UPDATE ON AvaliaItem
FOR EACH ROW
EXECUTE FUNCTION atualizar_avaliacao();

-- trigger que atualiza o campo NumEpisodios da tabela Podcast
CREATE OR REPLACE FUNCTION atualiza_num_episodios() 
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        UPDATE Podcast
        SET NumEpisodios = NumEpisodios + 1
        WHERE CodItem = NEW.CodPodcast;
    ELSIF (TG_OP = 'DELETE') THEN
        UPDATE Podcast
        SET NumEpisodios = NumEpisodios - 1
        WHERE CodItem = OLD.CodPodcast;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER atualiza_num_episodios_trigger
AFTER INSERT OR DELETE ON episodio
FOR EACH ROW EXECUTE FUNCTION atualiza_num_episodios();

-- trigger que verifica o valor de alguns campos de Colecao de acordo com o tipo
CREATE OR REPLACE FUNCTION verificar_colecao()
RETURNS TRIGGER AS $$
BEGIN
    IF (NEW.Tipo = 'album') THEN
        IF (NEW.CodArtista IS NULL OR NEW.CodUsuario IS NOT NULL) THEN
            RAISE EXCEPTION 'Ãlbum deve ter um artista e nÃ£o deve ter um ouvinte';
        END IF;
        IF (NEW.Gravadora IS NULL OR NEW.DataLancamento IS NULL OR NEW.descricao IS NOT NULL OR NEW.visibilidade IS NOT NULL) THEN
            RAISE EXCEPTION 'Ãlbum deve ter uma gravadora e data de lanÃ§amento e nÃ£o deve ter descriÃ§Ã£o ou visibilidade'; 
        END IF;
    ELSIF (NEW.Tipo = 'playlist') THEN
        IF (NEW.CodUsuario IS NULL OR NEW.CodArtista IS NOT NULL) THEN
            RAISE EXCEPTION 'Playlist deve ter um ouvinte e nÃ£o deve ter um artista';
        END IF;
        IF (NEW.gravadora IS NOT NULL OR NEW.visibilidade IS NULL) THEN
            RAISE EXCEPTION 'Playlist nÃ£o deve ter gravadora e deve ter visibilidade';
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER verificar_colecao_trigger
BEFORE INSERT OR UPDATE ON Colecao
FOR EACH ROW EXECUTE PROCEDURE verificar_colecao();

-- trigger que atualiza o campo QuantidadeMusicas e Duracao da tabela Colecao
CREATE OR REPLACE FUNCTION update_colecao() 
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        UPDATE Colecao
        SET QuantidadeMusicas = QuantidadeMusicas + 1,
            Duracao = Duracao + (SELECT Duracao FROM Musica WHERE CodItem = NEW.CodMusica)
        WHERE CodItem = NEW.CodColecao;
        RETURN NEW;
    ELSIF (TG_OP = 'DELETE') THEN
        UPDATE Colecao
        SET QuantidadeMusicas = QuantidadeMusicas - 1,
            Duracao = Duracao - (SELECT Duracao FROM Musica WHERE CodItem = OLD.CodMusica)
        WHERE CodItem = OLD.CodColecao;
        RETURN OLD;
    ELSIF (TG_OP = 'UPDATE') THEN
        UPDATE Colecao
        SET Duracao = Duracao - (SELECT Duracao FROM Musica WHERE CodItem = OLD.CodMusica) + (SELECT Duracao FROM Musica WHERE CodItem = NEW.CodMusica)
        WHERE CodItem = NEW.CodColecao;
        RETURN NEW;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_colecao_trigger
AFTER INSERT OR DELETE ON MusicaColecao
FOR EACH ROW EXECUTE FUNCTION update_colecao();

-- trigger que atualiza o campo NumeroSeguidores da tabela Artista ou Podcaster e o campo NumSeguindo da tabela Usuario
CREATE OR REPLACE FUNCTION atualizar_seguidores()
RETURNS TRIGGER AS $$
BEGIN
  IF (TG_OP = 'INSERT') THEN
    UPDATE Usuario
    SET NumSeguindo = NumSeguindo + 1
    WHERE Codigo = NEW.CodSeguidor;

    IF (EXISTS (SELECT 1 FROM Podcaster WHERE Codigo = NEW.CodSeguido)) THEN
      UPDATE Podcaster
      SET NumeroSeguidores = NumeroSeguidores + 1
      WHERE Codigo = NEW.CodSeguido;
    ELSE
      UPDATE Artista
      SET NumeroSeguidores = NumeroSeguidores + 1
      WHERE Codigo = NEW.CodSeguido;
    END IF;
    RETURN NEW;
  ELSEIF (TG_OP = 'DELETE') THEN
    UPDATE Usuario
    SET NumSeguindo = NumSeguindo - 1
    WHERE Codigo = OLD.CodSeguidor;

    IF (EXISTS (SELECT 1 FROM Podcaster WHERE Codigo = OLD.CodSeguido)) THEN
      UPDATE Podcaster
      SET NumeroSeguidores = NumeroSeguidores - 1
      WHERE Codigo = OLD.CodSeguido;
    ELSE
      UPDATE Artista
      SET NumeroSeguidores = NumeroSeguidores - 1
      WHERE Codigo = OLD.CodSeguido;
    END IF;
    RETURN OLD;
  END IF; 
END; $$ LANGUAGE plpgsql;

CREATE TRIGGER atualizar_seguidores_trigger
AFTER INSERT OR DELETE ON UsuarioSegue
FOR EACH ROW
EXECUTE FUNCTION atualizar_seguidores();

-- POVOAMENTO

-- Inserindo 10 gÃªneros musicais
INSERT INTO Genero (Nome, Descricao) VALUES 
('Rock', 'GÃªnero musical que emergiu nos anos 1950 e evoluiu com diversos subgÃªneros.'),
('Pop', 'GÃªnero popular caracterizado por melodias cativantes e fÃ¡cil consumo.'),
('Jazz', 'GÃªnero focado na improvisaÃ§Ã£o e expressÃ£o musical complexa.'),
('Blues', 'GÃªnero de origem afro-americana, frequentemente com temas emocionais profundos.'),
('Hip-Hop', 'GÃªnero de mÃºsica e cultura, conhecido pelas batidas e rap.'),
('Reggae', 'GÃªnero musical originado na Jamaica, popularizado por Bob Marley.'),
('Electronic', 'MÃºsica produzida eletronicamente, com batidas e sons sintetizados.'),
('Samba', 'GÃªnero musical brasileiro, com raÃ­zes africanas.'),
('Classical', 'MÃºsica erudita, normalmente orquestral, desenvolvida nos Ãºltimos sÃ©culos.'),
('Funk', 'GÃªnero rÃ­tmico e danÃ§ante, com forte presenÃ§a de baixo e bateria.');

-- SubgÃªneros relacionados aos 10 gÃªneros selecionados
INSERT INTO Subgenero (CodGenero, CodSubgenero) VALUES 
(1, 10),
(1, 7),
(2, 5),
(3, 9),
(4, 6),
(5, 7),
(6, 9),
(7, 8),
(8, 9),
(10, 1);

INSERT INTO Artista (Nome, Nacionalidade, Email, Senha) 
values
('ringo starr', 'britanica', 'ringo@org.com', 'ringo123'),
('cartola', 'brasileira', 'carlota@org.com', 'cartola123'),
('stromae', 'belga', 'str@org.com', 'stromae123'),
('santana', 'mexicana', 'santana@org.com', 'santana123'),
('kendrick lamar', 'estadunidense', 'realk@org.com', 'kendrick123');

INSERT INTO GeneroArtista(CodGenero, CodArtista) values
(1, 1),
(8, 2),
(7, 3),
(1, 4),
(5, 5);

INSERT INTO podcaster(Nome, Nacionalidade, AreaInfluencia, Email, Senha)
VALUES
('grupo flow', 'brasileira', 'batepapo', 'flow@mail.com', 'flow123'),
('podpah', 'brasileira', 'batepapo', 'podpah@org.com', 'pah123'),
('the economist', 'estadunidense', 'economia', 'economic@org.mail', 'eco123'),
('the new york times', 'estadunidense', 'noticiario', 'yankee@mail.com', 'yankee123'),
('duolingo', 'estadunidense', 'educacional', 'lingua@mail', 'lingu12');

INSERT INTO Usuario (Nome, Username, Nacionalidade, PaisAtual, Email, Senha, NumTelefone) VALUES
('PatrÃ­cia Campos', 'patricia_campos', 'brasileira', 'Brasil', 'patricia.campos@example.com', 'senha333', '+55 61 95678-9012'),
('Marcos Oliveira', 'marcos_oliveira', 'brasileira', 'Brasil', 'marcos.oliveira@example.com', 'senha888', '+55 21 99123-4567'),
('Elena GarcÃ­a', 'elena_garcia', 'espanhola', 'Espanha', 'elena.garcia@example.com', 'senha999', '+34 91 1234-5678'),
('Mikhail Ivanov', 'mikhail_ivanov', 'russa', 'RÃºssia', 'mikhail.ivanov@example.com', 'senha000', '+7 495 123-4567'),
('Chloe Dubois', 'chloe_dubois', 'francesa', 'FranÃ§a', 'chloe.dubois@example.com', 'senha111', '+33 1 2345-6789'),
('Akira Yamamoto', 'akira_yamamoto', 'japones', 'JapÃ£o', 'akira.yamamoto@example.com', 'senha222', '+81 3-1234-5678'),
('Priya Patel', 'priya_patel', 'indiana', 'Ãndia', 'priya.patel@example.com', 'senha333', '+91 22 1234-5678'),
('Luca Bianchi', 'luca_bianchi', 'italiana', 'ItÃ¡lia', 'luca.bianchi@example.com', 'senha555', '+39 06 12345678'),
('Nina Svensson', 'nina_svensson', 'sueca', 'SuÃ©cia', 'nina.svensson@example.com', 'senha666', '+46 8 1234567'),
('Olga Petrova', 'olga_petrov', 'russa', 'RÃºssia', 'olga.petrov@example.com', 'senha777', '+7 812 123-4567'),
('David Smith', 'david_smith', 'britanica', 'Reino Unido', 'david.smith@example.com', 'senha999', '+44 20 7946 0958');

-- Gerando coleÃ§Ãµes do tipo album e suas respectivas mÃºsicas
DO $$
DECLARE
    album_id INT;
    codMusica INT;
    codGenero INT;
BEGIN
    SELECT nova_colecao_album(1, 'ringo', '1973-01-01', 'emi') INTO album_id;
    codGenero := (SELECT Codigo FROM Genero WHERE Nome = 'Rock');
    INSERT INTO GeneroColecao(CodGenero, CodColecao) values (codGenero, album_id);
    PERFORM nova_musica(1, 'im the Greatest', '1973-01-01', '00:03:25', codGenero, NULL, album_id, ARRAY['john lennon', 'ringo starr']);
    PERFORM nova_musica(1, 'have you seen my baby', '1973-01-01', '3:44', codGenero, 'have you seen my baby, on the avenue', album_id, ARRAY['paul mccartney']);
    PERFORM nova_musica(1, 'photograph', '1973-01-01', '3:56', codGenero, 'everytime i see your face, it reminds me of the places we used to go', album_id, ARRAY['ringo starr']);
    PERFORM nova_musica(1, 'sunshine life for me', '1973-01-01', '2:48', codGenero, 'sunshine life for me, sunshine life for me', album_id, ARRAY['george harrison']);
    PERFORM nova_musica(1, 'youre sixteen', '1973-01-01', '2:49', codGenero, 'you come on like a dream, peaches and cream', album_id, ARRAY['richard sherman']);
    PERFORM nova_musica(1, 'oh my my', '1973-01-01', '4:16', codGenero, 'oh my my, oh my my, oh my my, oh my my', album_id, ARRAY['ringo starr']);
    PERFORM nova_musica(1, 'step lightly', '1973-01-01', '3:21', codGenero, 'step lightly, that''s right, step lightly', album_id, ARRAY['ringo starr']);
    PERFORM nova_musica(1, 'six oclock', '1973-01-01', '4:08', codGenero, 'six o''clock in the morning, you''ve just gone to sleep', album_id, ARRAY['paul mcCartney']);
    PERFORM nova_musica(1, 'devil woman', '1973-01-01', '4:03', codGenero, 'everytime i see you walk down the street, i say to myself', album_id, ARRAY['ringo starr']);
    PERFORM nova_musica(1, 'you and me (babe)', '1973-01-01', '4:59', codGenero, 'you and me babe, how about it?', album_id, ARRAY['ringo starr']);
    PERFORM nova_musica(1, 'it dont come easy', '1973-01-01', '3:04', codGenero, 'i dont come easy, you know i dont come easy', album_id, ARRAY['ringo starr']);

    SELECT nova_colecao_album(2, 'cartola-1976', '1976-01-01', 'emi') INTO album_id;
    codGenero := (SELECT Codigo FROM Genero WHERE Nome = 'Samba');
    INSERT INTO GeneroColecao(CodGenero, CodColecao) values (codGenero, album_id);
    PERFORM nova_musica(2, 'o mundo e um moinho', '1976-01-01', '3:53', codGenero, 'o mundo e um moinho, o mundo e um moinho', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'minha', '1976-01-01', '2:17', codGenero, 'minha, quem disse que ela foi minha', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'sala de recepÃ§Ã£o', '1976-01-01', '3:26', codGenero, 'habilitada por gente simples e tÃ£o pobre', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'nÃ£o posso viver sem ela', '1976-01-01', '2:42', codGenero, 'tive que contar a minha vida, a esta', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'preciso me encontrar', '1976-01-01', '3:16', codGenero, 'deixe-me ir, preciso andar, vou por ai a procurar, sorrir pra nÃ£o chorar', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'peito vazio', '1976-01-01', '2:52', codGenero, 'nada consigo fazer quando a saudade aperta', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'aconteceu', '1976-01-01', '2:47', codGenero, 'acontece, acontece, acontece', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'as rosas nao falam', '1976-01-01', '2:53', codGenero, 'as rosas nao falam, as rosas nao falam', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'sei chorar', '1976-01-01', '2:28', codGenero, 'ensaboa, ensaboa, ensaboa', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'ensaboa', '1976-01-01', '3:23', codGenero, 'na cadencia do samba, na cadencia do samba', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'meu drama', '1976-01-01', '3:06', codGenero, 'cordas de aÃ§o, cordas de aÃ§o, cordas de aÃ§o', album_id, ARRAY['cartola']);
    PERFORM nova_musica(2, 'cordas de aÃ§o', '1976-01-01', '2:15', codGenero, 'cordas de aÃ§o, cordas de aÃ§o', album_id, ARRAY['cartola']);

    SELECT nova_colecao_album(3, 'racine carree', '2013-01-01', 'emi') INTO album_id;
    codGenero := (SELECT Codigo FROM Genero WHERE Nome = 'Electronic');
    INSERT INTO GeneroColecao(CodGenero, CodColecao) values (codGenero, album_id);
    PERFORM nova_musica(3, 'ta fÃªte', '2013-01-01', '2:58', codGenero, 'c''est ta fÃªte, c''est ta fÃªte, c''est ta fÃªte', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'papaoutai', '2013-01-01', '3:51', codGenero, 'dites-moi d''oÃ¹ il vient, enfin je saurais oÃ¹ je vais', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'bÃ¢tard', '2013-01-01', '3:29', codGenero, 'je suis un bÃ¢tard, un bÃ¢tard, un bÃ¢tard', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'ave cesaria', '2013-01-01', '4:09', codGenero, 'ave cesaria, ave cesaria, ave cesaria', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'bÃ¢tard', '2013-01-01', '3:29', codGenero, 'je suis un bÃ¢tard, un bÃ¢tard, un bÃ¢tard', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'tous les mÃªmes', '2013-01-01', '3:30', codGenero, 'vous les hommes Ãªtes tous les mÃªmes', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'formidable', '2013-01-01', '3:34', codGenero, 'formidable, formidable, tu Ã©tais formidable', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'tous les mÃªmes', '2013-01-01', '3:30', codGenero, 'vous les hommes Ãªtes tous les mÃªmes', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'moules frites', '2013-01-01', '3:32', codGenero, 'moules frites, moules frites, moules frites', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'carmen', '2013-01-01', '3:09', codGenero, 'carmen, carmen, carmen', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'humain Ã  l''eau', '2013-01-01', '3:59', codGenero, 'humain Ã  l''eau, humain Ã  l''eau, humain Ã  l''eau', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'quand c''est', '2013-01-01', '3:00', codGenero, 'quand c''est fini, c''est fini, c''est fini', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'sommeil', '2013-01-01', '3:37', codGenero, 'je dors avec mes dÃ©mons, je dors avec mes dÃ©mons', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'mercÃ­', '2013-01-01', '3:47', codGenero, 'merci, merci, merci', album_id, ARRAY['stromae']);
    PERFORM nova_musica(3, 'avf', '2013-01-01', '3:46', codGenero, 'avf, avf, avf', album_id, ARRAY['stromae']);

    SELECT nova_colecao_album(4, 'santana', '1969-01-01', 'emi') INTO album_id;
    codGenero := (SELECT Codigo FROM Genero WHERE Nome = 'Rock');
    INSERT INTO GeneroColecao(CodGenero, CodColecao) values (codGenero, album_id);
    PERFORM nova_musica(4, 'waiting', '1969-01-01', '4:07', codGenero, 'waiting, waiting, waiting', album_id, ARRAY['J Zack']);
    PERFORM nova_musica(4, 'evil ways', '1969-01-01', '3:57', codGenero, 'you''ve got to change your evil ways, baby', album_id, ARRAY['Santana']);
    PERFORM nova_musica(4, 'shades of time', '1969-01-01', '3:15', codGenero, 'shades of time, shades of time', album_id, ARRAY['Santana']);
    PERFORM nova_musica(4, 'savor', '1969-01-01', '2:47', codGenero, 'savor, savor, savor', album_id, ARRAY['Santana']);
    PERFORM nova_musica(4, 'jingo', '1969-01-01', '4:23', codGenero, 'jingo, jingo, jingo', album_id, ARRAY['Babatunde Olatunji']);
    PERFORM nova_musica(4, 'persuasion', '1969-01-01', '2:36', codGenero, 'persuasion, persuasion, persuasion', album_id, ARRAY['Santana Band']);
    PERFORM nova_musica(4, 'treat', '1969-01-01', '4:46', codGenero, 'treat, treat, treat', album_id, ARRAY['Santana Band']);
    PERFORM nova_musica(4, 'you just dont care', '1969-01-01', '4:37', codGenero, 'you just don''t care, you just don''t care', album_id, ARRAY['Santana Band']);
    PERFORM nova_musica(4, 'soul sacrifice', '1969-01-01', '6:37', codGenero, 'soul sacrifice, soul sacrifice, soul sacrifice', album_id, ARRAY['Santana Band']);

    SELECT nova_colecao_album(5, 'damn.', '2017-01-01', 'aftermath') INTO album_id;
    codGenero := (SELECT Codigo FROM Genero WHERE Nome = 'Hip-Hop');
    INSERT INTO GeneroColecao(CodGenero, CodColecao) values (codGenero, album_id);
    PERFORM nova_musica(5, 'blood', '2017-01-01', '1:58', codGenero, 'is it wickedness? is it weakness?', album_id, ARRAY['Kendrick Duckworth']);
    PERFORM nova_musica(5, 'dna', '2017-01-01', '3:05', codGenero, 'i got, i got, i got, i got', album_id, ARRAY['Kendrick Duckworth', 'Michael Willians ||']);
    PERFORM nova_musica(5, 'yah', '2017-01-01', '2:40', codGenero, 'i got so many theories and suspicions', album_id, ARRAY['Kendrick Duckworth', 'Natche']);
    PERFORM nova_musica(5, 'element', '2017-01-01', '3:29', codGenero, 'new kung fu kenny', album_id, ARRAY['Kendrick Duckworth', 'Ricci Riera']);
    PERFORM nova_musica(5, 'feel', '2017-01-01', '3:35', codGenero, 'ain''t nobody prayin'' for me', album_id, ARRAY['Kendrick Duckworth']);
    PERFORM nova_musica(5, 'loyalty', '2017-01-01', '3:47', codGenero, 'i said i''m geeked and i''m fired up', album_id, ARRAY['Kendrick Duckworth']);
    PERFORM nova_musica(5, 'pride', '2017-01-01', '4:35', codGenero, 'love''s gonna get you killed', album_id, ARRAY['Kendrick Duckworth']);
    PERFORM nova_musica(5, 'humble', '2017-01-01', '2:57', codGenero, 'nobody pray for me', album_id, ARRAY['Kendrick Duckworth']);
    PERFORM nova_musica(5, 'lust', '2017-01-01', '5:07', codGenero, 'let me put the head in', album_id, ARRAY['Kendrick Duckworth']);
    PERFORM nova_musica(5, 'love', '2017-01-01', '3:33', codGenero, 'damn, love or lust', album_id, ARRAY['Kendrick Duckworth']);
    PERFORM nova_musica(5, 'xxx', '2017-01-01', '4:14', codGenero, 'america, god bless you if it''s good to you', album_id, ARRAY['Kendrick Duckworth']);
    PERFORM nova_musica(5, 'fear', '2017-01-01', '7:41', codGenero, 'why god, why god do i gotta suffer?', album_id, ARRAY['Kendrick Duckworth', 'Daniel The Alchemist']);
    PERFORM nova_musica(5, 'god', '2017-01-01', '4:09', codGenero, 'this what god feel like, huh, yeah', album_id, ARRAY['Kendrick Duckworth', 'Ronald LaTour']);
    PERFORM nova_musica(5, 'duckworth', '2017-01-01', '4:09', codGenero, 'it was always me versus the world', album_id, ARRAY['Kendrick Duckworth', 'Patrick 9th Wonder']);
END $$;

-- Gerando coleÃ§Ãµes do tipo playlist
DO $$
DECLARE
    playlist_id INT;
    codUsuario INT;
    codMusica INT;
BEGIN
    SELECT Codigo FROM Usuario WHERE Username = 'patricia_campos' INTO codUsuario;
    SELECT nova_colecao_playlist(codUsuario, 'Greatest Hits of 1973', true, 'A mix of the best songs from 1973') INTO playlist_id;
    INSERT INTO MusicaColecao(CodColecao, CodMusica, NumFaixa) 
    VALUES (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'photograph' LIMIT 1), 1),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'have you seen my baby' LIMIT 1), 2),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'step lightly' LIMIT 1), 3);

    SELECT Codigo FROM Usuario WHERE Username = 'marcos_oliveira' INTO codUsuario;
    SELECT nova_colecao_playlist(codUsuario, 'Samba Classics', true, 'Top hits of Cartola') INTO playlist_id;
    INSERT INTO MusicaColecao(CodColecao, CodMusica, NumFaixa) 
    VALUES (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'o mundo e um moinho' LIMIT 1), 1),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'as rosas nao falam' LIMIT 1), 2),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'cordas de aÃ§o' LIMIT 1), 3);

    SELECT Codigo FROM Usuario WHERE Username = 'elena_garcia' INTO codUsuario;
    SELECT nova_colecao_playlist(codUsuario, 'Electro Vibes', true, 'Stromae best electronic songs') INTO playlist_id;
    INSERT INTO MusicaColecao(CodColecao, CodMusica, NumFaixa)
    VALUES (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'papaoutai' LIMIT 1), 1),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'formidable' LIMIT 1), 2),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'carmen' LIMIT 1), 3);

    SELECT Codigo FROM Usuario WHERE Username = 'luca_bianchi' INTO codUsuario;
    SELECT nova_colecao_playlist(codUsuario, 'Santana Classics', true, 'Best hits from Santana') INTO playlist_id;
    INSERT INTO MusicaColecao(CodColecao, CodMusica, NumFaixa)
    VALUES (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'evil ways' LIMIT 1), 1),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'waiting' LIMIT 1), 2),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'soul sacrifice' LIMIT 1), 3);

    SELECT Codigo FROM Usuario WHERE Username = 'david_smith' INTO codUsuario;
    SELECT nova_colecao_playlist(codUsuario, 'DAMN. Best Hits', true, 'Top songs from Kendrick Lamar DAMN.') INTO playlist_id;
    INSERT INTO MusicaColecao(CodColecao, CodMusica, NumFaixa)
    VALUES (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'dna' LIMIT 1), 1),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'humble' LIMIT 1), 2),
           (playlist_id, (SELECT CodItem FROM Musica WHERE Titulo = 'love' LIMIT 1), 3);
END $$;

-- Gerando Podcasts e seus respectivos episÃ³dios
DO $$
DECLARE
    podcast_cod INT;
    podcaster_cod INT;
    ep_cod INT;
BEGIN
    podcaster_cod := (SELECT MIN(Codigo) FROM podcaster);
    SELECT novo_podcast(podcaster_cod, 'flow podcast', 'igor', 'portugues', 'batepapo') INTO podcast_cod;
    SELECT novo_episodio(podcast_cod, 'conversando com o presidente do nepal', '1:00:00', 1, 'politica', 'hoje nÃ³s vamos conversar com o presidente do Nepal') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'zezin big big');

    SELECT novo_episodio(podcast_cod, 'falando sobre armas nucleares', '53:00', 2, 'guerra', 'a guerra dignifica o homem') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Doutor Armando Paz');

    SELECT novo_podcast(podcaster_cod, 'flow sport club', 'monark', 'portugues', 'esportes') INTO podcast_cod;
    SELECT novo_episodio(podcast_cod, 'discutindo sobre a Copa do Mundo', '1:20:00', 1, 'futebol', 'hoje vamos falar sobre a histÃ³ria da Copa do Mundo') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Ronaldo FenÃ´meno');

    SELECT novo_episodio(podcast_cod, 'analisando os maiores jogadores do Brasil', '1:05:00', 2, 'futebol', 'discutiremos os maiores jogadores da histÃ³ria do futebol brasileiro') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'PelÃ©');

    podcaster_cod := podcaster_cod + 1;
    SELECT novo_podcast(podcaster_cod, 'podpah', 'mitico', 'portugues', 'batepapo') INTO podcast_cod;
    SELECT novo_episodio(podcast_cod, 'especial com Hugh Jackman', '2:45:32', 1, 'entretenimento', 'hoje estamos com uma estrela de Hollywood') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Hugh Jackman');

    SELECT novo_episodio(podcast_cod, 'mumuzinho', '3:20:10', 2, 'musica', 'boa noite, hoje estamos com um dos maiores sambistas do Brasil') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Mumuzinho');

    podcaster_cod := podcaster_cod + 1;
    SELECT novo_podcast(podcaster_cod, 'The Intelligence from The Economist', 'Michael Santia', 'ingles', 'economia', 'noticia') INTO podcast_cod;
    SELECT novo_episodio(podcast_cod, 'Global economic analysis', '1:30:00', 1, 'economia', 'A detailed analysis of the global economy') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Paul Krugman');

    SELECT novo_episodio(podcast_cod, 'Impact of global inflation', '45:00', 2, 'economia', 'The impact of inflation on various global sectors') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Janet Yellen');

    podcaster_cod := podcaster_cod + 1;
    SELECT novo_podcast(podcaster_cod, 'The Daily', 'Michael Barbaro', 'ingles', 'noticia', 'politica') INTO podcast_cod;
    SELECT novo_episodio(podcast_cod, 'Global climate crisis', '30:00', 1, 'meio ambiente', 'Discussion on the global climate crisis') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Greta Thunberg');

    SELECT novo_episodio(podcast_cod, 'US presidential elections', '40:00', 2, 'politica', 'An analysis of the upcoming US presidential elections') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Joe Biden');

    SELECT novo_podcast(podcaster_cod, 'The Argument', 'Jane Doe', 'ingles', 'debate', 'politica') INTO podcast_cod;
    SELECT novo_episodio(podcast_cod, 'Debating gun control in the US', '50:00', 1, 'politica', 'A heated debate on gun control legislation in the United States') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Wayne LaPierre');

    SELECT novo_episodio(podcast_cod, 'Free speech vs hate speech', '45:00', 2, 'sociedade', 'Exploring the fine line between free speech and hate speech in modern society') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Elon Musk');

    podcaster_cod := podcaster_cod + 1;
    SELECT novo_podcast(podcaster_cod, 'Duolingo Podcast', 'Nina Poland', 'ingles', 'educacional') INTO podcast_cod;
    SELECT novo_episodio(podcast_cod, 'Learning Spanish with stories', '25:00', 1, 'educacional', 'A Spanish lesson based on real-life stories') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'Spanish Teacher JosÃ©');

    SELECT novo_episodio(podcast_cod, 'Learning French with stories', '22:00', 2, 'educacional', 'A French lesson based on real-life stories') INTO ep_cod;
    INSERT INTO ConvidadoEpisodio(CodEpisodio, convidado) VALUES (ep_cod, 'French Teacher Marie');
END $$;

-- Seguindo artistas e podcasters
DO $$
DECLARE
  codUsuario RECORD;
  codArtistaPodcaster RECORD;
  follow_limit INTEGER;
BEGIN
  follow_limit := (SELECT COUNT(*) FROM Artista) + (SELECT COUNT(*) FROM Podcaster);
  FOR codUsuario IN SELECT Codigo FROM Usuario ORDER BY Codigo
  LOOP
    FOR codArtistaPodcaster IN (SELECT Codigo FROM Artista UNION SELECT Codigo FROM Podcaster) LIMIT follow_limit
    LOOP
      INSERT INTO UsuarioSegue(CodSeguidor, CodSeguido) VALUES (codUsuario.Codigo, codArtistaPodcaster.Codigo);
    END LOOP;
    follow_limit := follow_limit - 1;

    IF follow_limit <= 0 THEN
      EXIT;
    END IF;
  END LOOP;
END $$;

-- Avaliando itens
DO $$
DECLARE
  codUsuario RECORD;
  codItem RECORD;
  opiniaoLimite INTEGER;
  nota INTEGER;
  comentario TEXT;
BEGIN
  opiniaoLimite := (SELECT COUNT(*) FROM Item);
  FOR codUsuario IN (SELECT Codigo FROM Usuario)
  LOOP
    FOR codItem IN (SELECT Codigo FROM Item LIMIT GREATEST(opiniaoLimite, 0))
    LOOP
      nota := MOD(codUsuario.Codigo + codItem.codigo, 5) + 1;

      CASE 
        WHEN nota = 5 THEN comentario := 'Adorei! Muito bom!';
        WHEN nota = 4 THEN comentario := 'Gostei bastante, muito interessante!';
        WHEN nota = 3 THEN comentario := 'Foi bom, mas podia ser melhor.';
        WHEN nota = 2 THEN comentario := 'NÃ£o gostei tanto.';
        WHEN nota = 1 THEN comentario := 'Achei bem fraco.';
        ELSE comentario := 'Sem opiniÃ£o.';
      END CASE;

      INSERT INTO AvaliaItem(CodUsuario, CodItem, Nota, Comentario) 
      VALUES (codUsuario.Codigo, codItem.Codigo, nota, comentario);
    END LOOP;

    opiniaoLimite := opiniaoLimite - 1;

    IF opiniaoLimite <= 0 THEN
      EXIT;
    END IF;
  END LOOP;
END $$;
